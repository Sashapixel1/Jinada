-- Combined AccountChecker + Webhook sender (LocalScript)
-- –ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ StarterPlayer > StarterPlayerScripts
-- –°–æ–±–∏—Ä–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç GUI –∏ —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç –Ω–∞ discord webhook.
-- –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ WEBHOOK_URL –Ω–∞ –≤–∞—à –≤–µ–±—Ö—É–∫.

local WEBHOOK_URL = "https://discordapp.com/api/webhooks/–í–ê–®_WEBHOOK_ID/–í–ê–®_TOKEN" -- <- –ø–æ—Å—Ç–∞–≤—å —Å—é–¥–∞ URL

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

--------------------------------------------------------------------
-- üí∞ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï BELI
--------------------------------------------------------------------
local function formatBeli(amount)
	if type(amount) ~= "number" then return tostring(amount or 0) end
	local s = tostring(math.floor(amount))
	local formatted = s:reverse():gsub("(%d%d%d)", "%1."):reverse()
	if formatted:sub(1,1) == "." then formatted = formatted:sub(2) end
	return formatted .. "$"
end

--------------------------------------------------------------------
-- üçè –ú–û–î–£–õ–¨ –ü–†–û–í–ï–†–ö–ò –§–†–£–ö–¢–û–í –ß–ï–†–ï–ó –¢–†–ï–ô–î
--------------------------------------------------------------------
local function scanFruitsFromTrade()
	local fruitsFound = {}
	local fruitList = {
		"Rocket-Rocket","Spin-Spin","Blade-Blade","Spring-Spring","Bomb-Bomb",
		"Smoke-Smoke","Spike-Spike","Flame-Flame","Falcon-Falcon","Ice-Ice",
		"Sand-Sand","Dark-Dark","Diamond-Diamond","Light-Light","Rubber-Rubber",
		"Barrier-Barrier","Ghost-Ghost","Magma-Magma","Quake-Quake","Buddha-Buddha",
		"Love-Love","Spider-Spider","Sound-Sound","Phoenix-Phoenix","Portal-Portal",
		"Rumble-Rumble","Pain-Pain","Blizzard-Blizzard","Gravity-Gravity","Mammoth-Mammoth",
		"T-Rex-T-Rex","Yeti-Yeti","Dough-Dough","Shadow-Shadow","Venom-Venom",
		"Control-Control","Gas-Gas","Spirit-Spirit","Dragon-Dragon","Leopard-Leopard",
		"Kitsune-Kitsune","Creation-Creation"
	}

	local tradePath = { "Main", "Trade", "Container", "1", "FrameAdd", "Frame" }
	local tradeFrame = playerGui
	for _, part in ipairs(tradePath) do
		tradeFrame = tradeFrame:FindFirstChild(part)
		if not tradeFrame then return {} end
	end

	for _, fruitName in ipairs(fruitList) do
		if tradeFrame:FindFirstChild(fruitName) then
			table.insert(fruitsFound, fruitName)
		end
	end

	return fruitsFound
end

--------------------------------------------------------------------
-- üîç –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –í–õ–û–ñ–ï–ù–ù–´–ú –û–ë–™–ï–ö–¢–ê–ú
--------------------------------------------------------------------
local function getNested(root, parts)
	if not root then return nil end
	local cur = root
	for _, name in ipairs(parts) do
		cur = cur:FindFirstChild(name)
		if not cur then return nil end
	end
	return cur
end

--------------------------------------------------------------------
-- üì¶ –°–ë–û–† –î–ê–ù–ù–´–•
--------------------------------------------------------------------
local function collectPlayerData()
	local data = {}
	data.Name = player.Name or "Unknown"
	data.Beli = 0
	data.Race = "Unknown"
	data.BackpackFruits = {}
	data.TradeFruits = {}
	data.Stats = {}

	-- Beli
	local leader = player:FindFirstChild("leaderstats")
	if leader then
		local b = leader:FindFirstChild("Beli") or leader:FindFirstChild("beli")
		if b and typeof(b.Value) == "number" then
			data.Beli = b.Value
		end
	end
	local bnode = getNested(player, {"Data", "Beli"}) or getNested(player, {"Data", "beli"})
	if bnode and typeof(bnode.Value) == "number" then
		data.Beli = bnode.Value
	end

	-- Race
	if player.GetAttribute then
		local r = player:GetAttribute("Race") or player:GetAttribute("race")
		if r then data.Race = r end
	end
	local rn = getNested(player, {"Data", "Race"}) or getNested(player, {"Data", "race"})
	if rn and typeof(rn.Value) == "string" then
		data.Race = rn.Value
	end

	-- Backpack (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)
	local backpack = player:FindFirstChild("Backpack")
	if backpack then
		for _, it in ipairs(backpack:GetChildren()) do
			if it:IsA("Tool") or it:IsA("Model") then
				if it.Name:match("%w+%-%w+") then
					table.insert(data.BackpackFruits, it.Name)
				end
			end
		end
	end

	-- –§—Ä—É–∫—Ç—ã —á–µ—Ä–µ–∑ —Ç—Ä–µ–π–¥
	local ok, fruits = pcall(scanFruitsFromTrade)
	if ok and fruits then
		data.TradeFruits = fruits
	else
		data.TradeFruits = {}
	end

	-- Stats
	local statsRoot = getNested(player, {"Data", "Stats"}) or getNested(player, {"Stats"}) or getNested(player, {"Data"})
	if statsRoot then
		if statsRoot:FindFirstChild("Stats") then
			statsRoot = statsRoot:FindFirstChild("Stats")
		end
		for _, s in ipairs(statsRoot:GetChildren()) do
			local expVal, lvlVal = 0, 0
			local eObj = s:FindFirstChild("Exp") or s:FindFirstChild("Experience") or s:FindFirstChild("exp")
			local lObj = s:FindFirstChild("Level") or s:FindFirstChild("level")
			if eObj and typeof(eObj.Value) == "number" then expVal = eObj.Value end
			if lObj and typeof(lObj.Value) == "number" then lvlVal = lObj.Value end
			if expVal ~= 0 or lvlVal ~= 0 then
				data.Stats[s.Name] = { Exp = expVal, Level = lvlVal }
			end
		end
	end

	return data
end

--------------------------------------------------------------------
-- üßæ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–Å–¢–ê
--------------------------------------------------------------------
local function formatData(data)
	local lines = {}
	table.insert(lines, ("=== Account Info ‚Äî %s ==="):format(tostring(data.Name or "Unknown")))
	table.insert(lines, ("Beli: %s"):format(formatBeli(data.Beli or 0)))
	table.insert(lines, ("Race: %s"):format(tostring(data.Race or "Unknown")))
	table.insert(lines, "")

	table.insert(lines, "-- Backpack (—Ñ—Ä—É–∫—Ç—ã) --")
	if #data.BackpackFruits > 0 then
		table.insert(lines, table.concat(data.BackpackFruits, ", "))
	else
		table.insert(lines, "(–ø—É—Å—Ç–æ)")
	end
	table.insert(lines, "")

	table.insert(lines, "-- Trade Inventory (—Ñ—Ä—É–∫—Ç—ã) --")
	if #data.TradeFruits > 0 then
		for _, v in ipairs(data.TradeFruits) do
			table.insert(lines, "- " .. v)
		end
	else
		table.insert(lines, "(—Ñ—Ä—É–∫—Ç—ã –≤ —Ç—Ä–µ–π–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
	end
	table.insert(lines, "")

	table.insert(lines, "-- Stats --")
	local anyStats = false
	for k, v in pairs(data.Stats or {}) do
		anyStats = true
		table.insert(lines, string.format("%s ‚Äî Exp: %s  Level: %s", tostring(k), tostring(v.Exp or 0), tostring(v.Level or 0)))
	end
	if not anyStats then table.insert(lines, "(Stats –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)") end

	return table.concat(lines, "\n")
end

--------------------------------------------------------------------
-- üîó HTTP: —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
--------------------------------------------------------------------
local function safeRequest(reqTable)
	local success, res = pcall(function() return request(reqTable) end)
	if not success then
		-- –µ—Å–ª–∏ request –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º HttpService:PostAsync (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
		if HttpService and HttpService.HttpEnabled then
			local ok2, err2 = pcall(function()
				HttpService:PostAsync(reqTable.Url, reqTable.Body, Enum.HttpContentType.ApplicationJson, false, reqTable.Headers)
			end)
			if not ok2 then
				return false, tostring(err2)
			end
			return true, "Posted via HttpService"
		end
		return false, tostring(res)
	end
	return true, res
end

local function SendMessage(url, message)
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["content"] = message
	}
	local body = HttpService:JSONEncode(data)
	local ok, res = safeRequest({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	if ok then
		print("Webhook: sent message")
		return true, res
	else
		warn("Webhook send failed:", res)
		return false, res
	end
end

local function SendMessageEMBED(url, embed)
	local headers = {
		["Content-Type"] = "application/json"
	}
	-- embed.fields –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π –≤–∏–¥–∞ { name=..., value=..., inline=true/false }
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color or 65280,
				["fields"] = embed.fields or {},
				["footer"] = embed.footer and { ["text"] = embed.footer.text } or nil,
				["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
			}
		}
	}
	local body = HttpService:JSONEncode(data)
	local ok, res = safeRequest({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	if ok then
		print("Webhook: sent embed")
		return true, res
	else
		warn("Webhook embed send failed:", res)
		return false, res
	end
end

--------------------------------------------------------------------
-- üñ•Ô∏è GUI + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
--------------------------------------------------------------------
local function createUI()
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "AccountCheckerUI"
	screenGui.ResetOnSpawn = false
	screenGui.DisplayOrder = 50
	screenGui.Parent = playerGui

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 640, 0, 520)
	frame.Position = UDim2.new(0, 12, 0, 12)
	frame.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
	frame.BorderSizePixel = 0
	frame.Parent = screenGui

	local title = Instance.new("TextLabel")
	title.Size = UDim2.new(1, -24, 0, 36)
	title.Position = UDim2.new(0, 12, 0, 8)
	title.BackgroundTransparency = 1
	title.Font = Enum.Font.SourceSansBold
	title.TextSize = 20
	title.TextColor3 = Color3.fromRGB(240,240,240)
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.Text = "Account Checker (–ª–æ–∫–∞–ª—å–Ω–æ) ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook"
	title.Parent = frame

	local refreshBtn = Instance.new("TextButton")
	refreshBtn.Size = UDim2.new(0, 120, 0, 34)
	refreshBtn.Position = UDim2.new(0, 12, 0, 52)
	refreshBtn.Text = "–û–±–Ω–æ–≤–∏—Ç—å"
	refreshBtn.Font = Enum.Font.SourceSansBold
	refreshBtn.TextSize = 16
	refreshBtn.Parent = frame

	local sendBtn = Instance.new("TextButton")
	sendBtn.Size = UDim2.new(0, 170, 0, 34)
	sendBtn.Position = UDim2.new(0, 148, 0, 52)
	sendBtn.Text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ webhook"
	sendBtn.Font = Enum.Font.SourceSansBold
	sendBtn.TextSize = 16
	sendBtn.Parent = frame

	local copyBtn = Instance.new("TextButton")
	copyBtn.Size = UDim2.new(0, 150, 0, 34)
	copyBtn.Position = UDim2.new(0, 330, 0, 52)
	copyBtn.Text = "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
	copyBtn.Font = Enum.Font.SourceSansBold
	copyBtn.TextSize = 16
	copyBtn.Parent = frame

	local consoleBtn = Instance.new("TextButton")
	consoleBtn.Size = UDim2.new(0, 210, 0, 34)
	consoleBtn.Position = UDim2.new(0, 494, 0, 52)
	consoleBtn.Text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤ Output"
	consoleBtn.Font = Enum.Font.SourceSans
	consoleBtn.TextSize = 16
	consoleBtn.Parent = frame

	local scroll = Instance.new("ScrollingFrame")
	scroll.Size = UDim2.new(1, -24, 1, -120)
	scroll.Position = UDim2.new(0, 12, 0, 100)
	scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
	scroll.ScrollBarThickness = 8
	scroll.BackgroundColor3 = Color3.fromRGB(20,20,20)
	scroll.Parent = frame

	local content = Instance.new("TextLabel")
	content.Size = UDim2.new(1, -20, 0, 10)
	content.Position = UDim2.new(0, 10, 0, 8)
	content.BackgroundTransparency = 1
	content.Font = Enum.Font.Code
	content.TextSize = 14
	content.TextColor3 = Color3.fromRGB(225,225,225)
	content.TextWrapped = true
	content.TextYAlignment = Enum.TextYAlignment.Top
	content.Text = ""
	content.Parent = scroll

	local status = Instance.new("TextLabel")
	status.Size = UDim2.new(1, -24, 0, 20)
	status.Position = UDim2.new(0, 12, 1, -24)
	status.BackgroundTransparency = 1
	status.Font = Enum.Font.SourceSansItalic
	status.TextSize = 12
	status.TextColor3 = Color3.fromRGB(180,180,180)
	status.TextXAlignment = Enum.TextXAlignment.Left
	status.Text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ‚Äî"
	status.Parent = frame

	local function refresh()
		local ok, data = pcall(collectPlayerData)
		if not ok or not data then
			content.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: " .. tostring(data)
			status.Text = "–û—à–∏–±–∫–∞: " .. tostring(data)
			return nil
		end
		local txt = formatData(data)
		content.Text = txt

		local textBounds = content.TextBounds
		local height = math.max(textBounds.Y + 24, 20)
		content.Size = UDim2.new(1, -20, 0, height)
		scroll.CanvasSize = UDim2.new(0, 0, 0, height + 32)
		status.Text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " .. os.date("%Y-%m-%d %H:%M:%S")
		return data
	end

	refreshBtn.MouseButton1Click:Connect(function()
		refresh()
	end)

	copyBtn.MouseButton1Click:Connect(function()
		refresh()
		if type(setclipboard) == "function" then
			pcall(function() setclipboard(content.Text) end)
			copyBtn.Text = "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ"
			task.delay(1.2, function() if copyBtn then copyBtn.Text = "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç" end end)
		end
	end)

	consoleBtn.MouseButton1Click:Connect(function()
		refresh()
		print("=== Account Info (client) ===")
		print(content.Text)
		consoleBtn.Text = "‚úÖ –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ"
		task.delay(1.2, function() if consoleBtn then consoleBtn.Text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤ Output" end end)
	end)

	-- –§–æ—Ä–º–∏—Ä—É–µ–º embed –∏ –ø–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	local function buildEmbedFromData(data)
		local fields = {}

		-- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–ª—è
		table.insert(fields, { name = "–ò–º—è", value = tostring(data.Name or "Unknown"), inline = true })
		table.insert(fields, { name = "Race", value = tostring(data.Race or "Unknown"), inline = true })
		table.insert(fields, { name = "Beli", value = formatBeli(data.Beli or 0), inline = true })

		-- –ö–æ–ª-–≤–æ —Ñ—Ä—É–∫—Ç–æ–≤
		table.insert(fields, { name = "–§—Ä—É–∫—Ç—ã –≤ —Ä—é–∫–∑–∞–∫–µ", value = tostring(#(data.BackpackFruits or {})) .. " —à—Ç.", inline = true })
		table.insert(fields, { name = "–§—Ä—É–∫—Ç—ã –≤ —Ç—Ä–µ–π–¥–µ", value = tostring(#(data.TradeFruits or {})) .. " —à—Ç.", inline = true })

		-- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—Ä—É–∫—Ç–æ–≤ ‚Äî –¥–æ–±–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π ‚Äî —É—Å–µ—á—ë–º)
		if #data.BackpackFruits > 0 then
			local v = table.concat(data.BackpackFruits, ", ")
			if #v > 1000 then v = v:sub(1, 980) .. "..." end
			table.insert(fields, { name = "Backpack list", value = v, inline = false })
		end
		if #data.TradeFruits > 0 then
			local v = table.concat(data.TradeFruits, ", ")
			if #v > 1000 then v = v:sub(1, 980) .. "..." end
			table.insert(fields, { name = "Trade list", value = v, inline = false })
		end

		-- Stats: –¥–æ–±–∞–≤–∏–º –∫–∞–∂–¥—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞–∫ –ø–æ–ª–µ (–µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî —É—Å–µ—á—ë–º –¥–æ 10)
		local count = 0
		for k, v in pairs(data.Stats or {}) do
			if count >= 10 then break end
			local s = ("Exp: %s | Lvl: %s"):format(tostring(v.Exp or 0), tostring(v.Level or 0))
			table.insert(fields, { name = tostring(k), value = s, inline = true })
			count = count + 1
		end
		if (data.Stats and next(data.Stats) and count == 0) then
			-- –µ—Å–ª–∏ –µ—Å—Ç—å stats –Ω–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ü–∏–∫–ª (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –¥–æ–±–∞–≤–∏–º –∑–∞–º–µ—Ç–∫—É
			table.insert(fields, { name = "Stats", value = "(–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã)", inline = false })
		end

		local embed = {
			title = ("Account: %s"):format(tostring(data.Name or "Unknown")),
			description = "–õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–ª–∏–µ–Ω—Ç–∞",
			color = 3447003, -- —Å–∏–Ω–∏–π
			fields = fields,
			footer = { text = ("Sent at %s"):format(os.date("%Y-%m-%d %H:%M:%S")) }
		}
		return embed
	end

	sendBtn.MouseButton1Click:Connect(function()
		sendBtn.Text = "–û—Ç–ø—Ä–∞–≤–∫–∞..."
		local data = refresh()
		if not data then
			sendBtn.Text = "–û—à–∏–±–∫–∞"
			task.delay(1.5, function() if sendBtn then sendBtn.Text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ webhook" end end)
			return
		end

		-- –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ embed (–∏ —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ fallback)
		local embed = buildEmbedFromData(data)
		local ok, res = SendMessageEMBED(WEBHOOK_URL, embed)
		if not ok then
			-- Fallback: –æ—Ç–ø—Ä–∞–≤–∏–º plain text (–µ—Å–ª–∏ embed –Ω–µ –ø—Ä–æ—à—ë–ª)
			local txt = formatData(data)
			local ok2, res2 = SendMessage(WEBHOOK_URL, "```" .. txt:sub(1, 1900) .. "```")
			if ok2 then
				sendBtn.Text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback)"
			else
				sendBtn.Text = "‚ùå –û—à–∏–±–∫–∞"
			end
		else
			sendBtn.Text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
		end

		task.delay(1.5, function() if sendBtn then sendBtn.Text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ webhook" end end)
	end)

	-- initial
	refresh()
end

local ok, err = pcall(createUI)
if not ok then
	warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AccountChecker UI: ", err)
end
